#include<stdio.h>
#include<iostream>
using namespace std;
class stack{
private:
int capacity;
int top;
int *ptr;

public:
stack();
stack(int);
void createStack(int);
void push(int);
int peek();
void pop();
bool isOverflow();
bool isUnderFlow();
~stack();
stack(stack&);
stack& operator=(stack&);
};

//destructor
stack::~stack(){
    if(ptr!=NULL){
        delete []ptr;
    }
}

//copy constructor to implement deep copy
stack::stack(stack &s){
capacity=s.capacity;
top=s.top;
ptr=new int[capacity];
for(int i=0;i<=top;i++){
    ptr[i]=s.ptr[i];
}
}

//copy assignment operator
stack& stack::operator=(stack &s){
    if(ptr!=NULL){
        delete []ptr;
    }
    capacity=s.capacity;
top=s.top;
ptr=new int[capacity];
for(int i=0;i<=top;i++){
    ptr[i]=s.ptr[i];
}
return *this;
}


//constructor
stack::stack(){
    capacity=0;
    top=-1;
    ptr=NULL;
}

//parameterized constructor
stack::stack(int cap){
capacity=cap;
top=-1;
ptr=new int[capacity];
}

//To create an stack
void stack::createStack(int cap){
    if(ptr!=NULL){
        delete []ptr;
    }
capacity=cap;
top=-1;
ptr=new int[capacity];
}

//to push a new element in the stack
void stack::push(int data){
    if(isOverflow()){
        cout<<"Insertion not possibleas stack is full"<<endl;
    }
    else{
        top++;
        ptr[top]=data;
    }
}

//to see the top element
int stack::peek(){
    if(isUnderFlow()){
        cout<<"List is empty!!! Nothing to peek"<<endl;
        return 0;

    }
    else{
        return ptr[top];
    }
}

//to remove the top element
void stack::pop(){
if(isUnderFlow()){
        cout<<"List is empty!!! Nothing to remove"<<endl;
    }
else{
    top--;
}
}

//to check if stack is full
bool stack::isOverflow(){
 return top==capacity-1;
}

//to check if stack is empty
bool stack::isUnderFlow(){
 return top==-1;
}

int main(){
    stack s(5);
    s.push(10);
    s.push(11);
    s.push(100);
    s.push(1);
    int a=s.peek();
    cout<<a<<endl;
     s.push(1);
      s.push(1);
    return 0;

}
